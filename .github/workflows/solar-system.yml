name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - master
      - 'feature/*'
    
env:
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  


jobs:
    unit-testing:
        env:
          MONGO_URI: mongodb://localhost:27017/superData
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        continue-on-error: true
        name: Unit Testing
        runs-on: self-hosted
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: 20
    
        - name: Cache Dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        
        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: unit-test
          continue-on-error: true
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml
        - name: 'Cleanup build folder'
          run: |
            ls -la ./
            rm -rf ./* || true
            rm -rf ./.??* || true
            ls -la ./
          
    code-coverage:
      name: Code Coverage
      env:
          MONGO_URI: mongodb://mongo:27017/superData
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

      services:
        mongodb:
          image: siddharth67/mongo-db:non-prod
          options:
            --name mongo
      container:
        image: node:18
      continue-on-error: true
      runs-on: self-hosted
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      
      - name: Install Dependencies
        run: npm install
        
      - name: Code Coverage
        continue-on-error: true
        run: npm run coverage
      - name: Archive Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-result
          path: coverage
          retention-days: 5


      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

    docker:
      permissions:
        packages: write
        contents: read
      needs: [unit-testing, code-coverage]
      name: Containerization
      runs-on: self-hosted
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
     

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}    # don't need to define in vars
          password: ${{ secrets.GITHUB_TOKEN }}       #generated at each run, don't need to define in secrets

      - name: Docker Build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
      
      - name: Docker Stop Containers and Remove
        continue-on-error: true
        run: |
          docker stop solar-system-app
          docker rm -f solar-system-app
    

      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using WGET
          wget -q -O - 127.0.0.1:3000/live | grep live


      - name: push to registries
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
              ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
      
      - name: Docker Stop Containers and Remove
        run: |
          docker stop solar-system-app
          docker image rm -f ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
  
    dev-deploy:
      needs: docker
      runs-on: self-hosted
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl
          uses: azure/setup-kubectl@v4
          with:
            version: v1.29.0

        - name: Set Kubernetes Context
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch kubectl version
          run: |
            kubectl version
            echo -----------------
            kubectl get nodes

